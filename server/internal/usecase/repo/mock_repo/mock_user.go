// Code generated by MockGen. DO NOT EDIT.
// Source: ./user.go
//
// Generated by this command:
//
//	mockgen -source=./user.go -destination=./mock_repo/mock_user.go -package mock_repo
//

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	user "github.com/reearth/reearth-accounts/server/pkg/user"
	gomock "go.uber.org/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
	isgomock struct{}
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUser) Create(arg0 context.Context, arg1 *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockUser) FindAll(arg0 context.Context) (user.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].(user.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockUserMockRecorder) FindAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUser)(nil).FindAll), arg0)
}

// FindByAlias mocks base method.
func (m *MockUser) FindByAlias(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAlias", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAlias indicates an expected call of FindByAlias.
func (mr *MockUserMockRecorder) FindByAlias(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAlias", reflect.TypeOf((*MockUser)(nil).FindByAlias), arg0, arg1)
}

// FindByEmail mocks base method.
func (m *MockUser) FindByEmail(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserMockRecorder) FindByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUser)(nil).FindByEmail), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockUser) FindByID(arg0 context.Context, arg1 user.ID) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserMockRecorder) FindByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUser)(nil).FindByID), arg0, arg1)
}

// FindByIDs mocks base method.
func (m *MockUser) FindByIDs(arg0 context.Context, arg1 user.IDList) (user.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", arg0, arg1)
	ret0, _ := ret[0].(user.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs.
func (mr *MockUserMockRecorder) FindByIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockUser)(nil).FindByIDs), arg0, arg1)
}

// FindByName mocks base method.
func (m *MockUser) FindByName(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockUserMockRecorder) FindByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockUser)(nil).FindByName), arg0, arg1)
}

// FindByNameOrEmail mocks base method.
func (m *MockUser) FindByNameOrEmail(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNameOrEmail", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNameOrEmail indicates an expected call of FindByNameOrEmail.
func (mr *MockUserMockRecorder) FindByNameOrEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNameOrEmail", reflect.TypeOf((*MockUser)(nil).FindByNameOrEmail), arg0, arg1)
}

// FindByPasswordResetRequest mocks base method.
func (m *MockUser) FindByPasswordResetRequest(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPasswordResetRequest", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPasswordResetRequest indicates an expected call of FindByPasswordResetRequest.
func (mr *MockUserMockRecorder) FindByPasswordResetRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPasswordResetRequest", reflect.TypeOf((*MockUser)(nil).FindByPasswordResetRequest), arg0, arg1)
}

// FindBySub mocks base method.
func (m *MockUser) FindBySub(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySub", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySub indicates an expected call of FindBySub.
func (mr *MockUserMockRecorder) FindBySub(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySub", reflect.TypeOf((*MockUser)(nil).FindBySub), arg0, arg1)
}

// FindBySubOrCreate mocks base method.
func (m *MockUser) FindBySubOrCreate(arg0 context.Context, arg1 *user.User, arg2 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySubOrCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySubOrCreate indicates an expected call of FindBySubOrCreate.
func (mr *MockUserMockRecorder) FindBySubOrCreate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySubOrCreate", reflect.TypeOf((*MockUser)(nil).FindBySubOrCreate), arg0, arg1, arg2)
}

// FindByVerification mocks base method.
func (m *MockUser) FindByVerification(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByVerification", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByVerification indicates an expected call of FindByVerification.
func (mr *MockUserMockRecorder) FindByVerification(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByVerification", reflect.TypeOf((*MockUser)(nil).FindByVerification), arg0, arg1)
}

// Remove mocks base method.
func (m *MockUser) Remove(arg0 context.Context, arg1 user.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockUserMockRecorder) Remove(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockUser)(nil).Remove), arg0, arg1)
}

// Save mocks base method.
func (m *MockUser) Save(arg0 context.Context, arg1 *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUserMockRecorder) Save(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUser)(nil).Save), arg0, arg1)
}

// SearchByKeyword mocks base method.
func (m *MockUser) SearchByKeyword(arg0 context.Context, arg1 string) (user.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByKeyword", arg0, arg1)
	ret0, _ := ret[0].(user.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByKeyword indicates an expected call of SearchByKeyword.
func (mr *MockUserMockRecorder) SearchByKeyword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByKeyword", reflect.TypeOf((*MockUser)(nil).SearchByKeyword), arg0, arg1)
}

// MockUserQuery is a mock of UserQuery interface.
type MockUserQuery struct {
	ctrl     *gomock.Controller
	recorder *MockUserQueryMockRecorder
	isgomock struct{}
}

// MockUserQueryMockRecorder is the mock recorder for MockUserQuery.
type MockUserQueryMockRecorder struct {
	mock *MockUserQuery
}

// NewMockUserQuery creates a new mock instance.
func NewMockUserQuery(ctrl *gomock.Controller) *MockUserQuery {
	mock := &MockUserQuery{ctrl: ctrl}
	mock.recorder = &MockUserQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserQuery) EXPECT() *MockUserQueryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockUserQuery) FindAll(arg0 context.Context) (user.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].(user.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockUserQueryMockRecorder) FindAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserQuery)(nil).FindAll), arg0)
}

// FindByAlias mocks base method.
func (m *MockUserQuery) FindByAlias(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAlias", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAlias indicates an expected call of FindByAlias.
func (mr *MockUserQueryMockRecorder) FindByAlias(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAlias", reflect.TypeOf((*MockUserQuery)(nil).FindByAlias), arg0, arg1)
}

// FindByEmail mocks base method.
func (m *MockUserQuery) FindByEmail(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserQueryMockRecorder) FindByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserQuery)(nil).FindByEmail), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockUserQuery) FindByID(arg0 context.Context, arg1 user.ID) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserQueryMockRecorder) FindByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserQuery)(nil).FindByID), arg0, arg1)
}

// FindByIDs mocks base method.
func (m *MockUserQuery) FindByIDs(arg0 context.Context, arg1 user.IDList) (user.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", arg0, arg1)
	ret0, _ := ret[0].(user.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs.
func (mr *MockUserQueryMockRecorder) FindByIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockUserQuery)(nil).FindByIDs), arg0, arg1)
}

// FindByName mocks base method.
func (m *MockUserQuery) FindByName(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockUserQueryMockRecorder) FindByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockUserQuery)(nil).FindByName), arg0, arg1)
}

// FindByNameOrEmail mocks base method.
func (m *MockUserQuery) FindByNameOrEmail(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNameOrEmail", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNameOrEmail indicates an expected call of FindByNameOrEmail.
func (mr *MockUserQueryMockRecorder) FindByNameOrEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNameOrEmail", reflect.TypeOf((*MockUserQuery)(nil).FindByNameOrEmail), arg0, arg1)
}

// FindBySub mocks base method.
func (m *MockUserQuery) FindBySub(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySub", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySub indicates an expected call of FindBySub.
func (mr *MockUserQueryMockRecorder) FindBySub(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySub", reflect.TypeOf((*MockUserQuery)(nil).FindBySub), arg0, arg1)
}

// SearchByKeyword mocks base method.
func (m *MockUserQuery) SearchByKeyword(arg0 context.Context, arg1 string) (user.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByKeyword", arg0, arg1)
	ret0, _ := ret[0].(user.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByKeyword indicates an expected call of SearchByKeyword.
func (mr *MockUserQueryMockRecorder) SearchByKeyword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByKeyword", reflect.TypeOf((*MockUserQuery)(nil).SearchByKeyword), arg0, arg1)
}
