// Code generated by MockGen. DO NOT EDIT.
// Source: ./cerbos.go
//
// Generated by this command:
//
//	mockgen -source=./cerbos.go -destination=./mock_gateway/mock_cerbos.go -package mock_gateway
//

// Package mock_gateway is a generated GoMock package.
package mock_gateway

import (
	context "context"
	reflect "reflect"

	cerbos "github.com/cerbos/cerbos-sdk-go/cerbos"
	gomock "go.uber.org/mock/gomock"
)

// MockCerbosGateway is a mock of CerbosGateway interface.
type MockCerbosGateway struct {
	ctrl     *gomock.Controller
	recorder *MockCerbosGatewayMockRecorder
	isgomock struct{}
}

// MockCerbosGatewayMockRecorder is the mock recorder for MockCerbosGateway.
type MockCerbosGatewayMockRecorder struct {
	mock *MockCerbosGateway
}

// NewMockCerbosGateway creates a new mock instance.
func NewMockCerbosGateway(ctrl *gomock.Controller) *MockCerbosGateway {
	mock := &MockCerbosGateway{ctrl: ctrl}
	mock.recorder = &MockCerbosGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCerbosGateway) EXPECT() *MockCerbosGatewayMockRecorder {
	return m.recorder
}

// CheckPermissions mocks base method.
func (m *MockCerbosGateway) CheckPermissions(ctx context.Context, principal *cerbos.Principal, resources []*cerbos.Resource, actions []string) (*cerbos.CheckResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermissions", ctx, principal, resources, actions)
	ret0, _ := ret[0].(*cerbos.CheckResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermissions indicates an expected call of CheckPermissions.
func (mr *MockCerbosGatewayMockRecorder) CheckPermissions(ctx, principal, resources, actions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermissions", reflect.TypeOf((*MockCerbosGateway)(nil).CheckPermissions), ctx, principal, resources, actions)
}
